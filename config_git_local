#!/bin/python3

import os
import json
import argparse
from collections.abc import Callable
from pathlib import Path


PROFILES_DIR = os.path.expandvars("$HOME/.git_profiles/")


class SingleAction(argparse.Action):
    """This class is for actions that can be executed without reading the usual arguments."""

    def __init__(self, option_strings, dest, test_function: Callable[[], None], **kwargs):
        self._test_function = test_function
        super().__init__(option_strings, dest, nargs=0, default=argparse.SUPPRESS, **kwargs)

    def __call__(self, parser, namespace, values, option_string, **kwargs):
        # if testing flag was set, ignore everything else and just test
        self._test_function()
        parser.exit()

    @classmethod
    def build(cls, invoked_function: Callable[[], None]):
        """Returns action that can be used as an actual argparse action. Basically returns partial function."""

        return lambda option_strings, dest, **kwargs: SingleAction(option_strings, dest, invoked_function, **kwargs)


def list_profiles():
    files = os.listdir(PROFILES_DIR)
    file_stems = [Path(file).stem for file in files]
    print(os.linesep.join(file_stems))


def activate_profile(profile_name: str):
    # read the profile file
    profile_file = os.path.join(PROFILES_DIR, f"{profile_name}.json")
    if not os.path.isfile(profile_file):
        print(f"Profile not found: '{profile_name}' (should be found in '{profile_file}').")
        exit(1)
    with open(profile_file, 'r') as f:
        profile: dict[str, str] = json.load(f)
    for key, value in profile.items():
        os.system(f"git config --local {key} '{value}'")
    print(f"Activated local profile: {profile_name}")
    print(os.linesep.join([f"{key}={value}" for key, value in profile.items()]))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("profile_name", help="Name (stem) of the profile file in the profile directory.")
    parser.add_argument("-l", "--list", action=SingleAction.build(list_profiles), help="Lists available profiles (no other arguments needed).")
    args = parser.parse_args()
    # gotta have the profile directory
    if not os.path.isdir(PROFILES_DIR):
        os.mkdir(PROFILES_DIR)
    if not os.path.isdir(".git"):
        print("This tool can only be used in a git repository!")
        exit(1)
    activate_profile(args.profile_name)


if __name__ == "__main__":
    main()
